// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫:
const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        // –∫–æ–≥–¥–∞ –º—ã –≤–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã - –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º—ã:
        this.mode = null;
        //–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        this.list = [];
        //–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        this.user = {};
        //–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ profile (1,2,3,4,5)
        this.count = 0;
    }

    async start(msg){
        this.mode = 'main'
        // –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å messages/main.txt
        const text = this.loadMessage('main')
        // –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å images/main.jpg
        await this.sendImage('main')
        await this.sendText(text)

        //menu
        await this.showMainMenu({
            'start': 'main menu bot',
            'profile': 'Tinder profile generation',
            'opener': 'Dating message ü•∞',
            'message': 'Correspondence on your behalf üòà',
            'date': 'Correspondence with stars üî•',
            'gpt': 'talk with gpt',
            'html': 'html',
        })
    }

    async html(msg) {
        await this.sendHTML('<h3 style="color: red"> –ü—Ä–∏–≤–µ—Ç! </h3>')
        const html = this.loadHtml('main')
        await this.sendHTML(html, {theme: 'dark'})
        await this.sendHTML(html, {theme: 'light'})
    }

    async gpt(msg){
        this.mode = 'gpt'
        const text = this.loadMessage('gpt')
        await this.sendImage('gpt')
        await this.sendText(text)
    }

    async gptDialog(msg){
        const text = msg.text;
        const myMessage = await this.sendText('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        const answer = await chatgpt.sendQuestion('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', text)
        await this.editText(myMessage, answer)
    }

    async date(msg){
        this.mode = 'date'
        const text = this.loadMessage('date')
        await this.sendImage('date')
        //–¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏:
        await this.sendTextButtons(text, {
            'date_grande':'–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
            'date_robbie':'–ú–∞—Ä–≥–æ –†–æ–±–±–∏',
            'date_zendaya':'–ó–µ–Ω–¥–µ—è',
            'date_gosling':'–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥',
            'date_hardy':'–¢–æ–º –•–∞—Ä–¥–∏',

        })
    }

    async dateButton(callbackQuery){
        const query = callbackQuery.data;
        await this.sendImage(query)
        await this.sendText('–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!')
        const prompt = this.loadPrompt(query)
        chatgpt.setPrompt(prompt)
    }

    async dateDialog(msg){
        const text = msg.text
        const myMessage = await this.sendText('–ü–æ–¥–æ–∂–¥–∏—Ç–µ')
        const answer = await chatgpt.addMessage(text)
        //—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.editText(myMessage, answer)
    }

    async message(msg) {
        this.mode = 'message'
        const text = this.loadMessage('message')
        await this.sendImage('message')
        await this.sendTextButtons(text, {
            'message_next':'–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'message_date':'–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ',
        })
        this.list = []
    }

    async messageButton(callbackQuery) {
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query)
        const userChatHistory = this.list.join('\n\n');
        const myMessage = await this.sendText('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        const answer = await chatgpt.sendQuestion(prompt, userChatHistory)
        await this.editText(myMessage, answer)
    }

    async messageDialog(msg) {
        const text = msg.text
        this.list.push(text)
    }

    async profile(msg){
        this.mode = 'profile'
        const text = this.loadMessage('profile')
        await this.sendImage('profile')
        await this.sendText(text)

        this.user = {}
        await this.sendText('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    }

    async profileDialog(msg){
        const text = msg.text
        this.count++;

        if (this.count === 1) {
            this.user['age'] = text;
            await this.sendText('–ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?')
        }
        if (this.count === 2) {
            this.user['occupation'] = text;
            await this.sendText('–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?')
        }
        if (this.count === 3) {
            this.user['hobby'] = text;
            await this.sendText('–ß—Ç–æ —Ç–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?')
        }
        if (this.count === 4) {
            this.user['annoys'] = text;
            await this.sendText('–ö–∞–∫–∞—è —Ü–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏?')
        }
        if (this.count === 5) {
            this.user['goals'] = text;

            //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Ç—É gpt
            const prompt = this.loadPrompt('profile')
            const info = userInfoToString(this.user);

            const myMessage = await this.sendText('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')

            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer)

        }
    }


    async opener(msg){
        this.mode = 'opener'
        const text = this.loadMessage('opener')
        await this.sendImage('opener')
        await this.sendText(text)

        this.user = {}
        await this.sendText('–ö–∞–∫–æ–µ –∏–º—è —É –¥–µ–≤—É—à–∫–∏?')
    }

    async openerDialog(msg){
        const text = msg.text
        this.count++;

        if (this.count === 1) {
            this.user['name'] = text;
            await this.sendText('–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?')
        }
        if (this.count === 2) {
            this.user['age'] = text;
            await this.sendText('–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10')
        }
        if (this.count === 3) {
            this.user['handsome'] = text;
            await this.sendText('–ß–µ–º –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è?')
        }
        if (this.count === 4) {
            this.user['occupation'] = text;
            await this.sendText('–ö–∞–∫–∞—è —Ü–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏?')
        }
        if (this.count === 5) {
            this.user['goals'] = text;

            //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Ç—É gpt
            const prompt = this.loadPrompt('opener')
            const info = userInfoToString(this.user);

            const myMessage = await this.sendText('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')

            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer)
        }
    }

    // –ú—ã –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Ç—É—Ç –Ω–∞—à –∫–æ–¥
    async hello(msg) {
        if (this.mode === 'gpt')
            await this.gptDialog(msg);
        else if (this.mode === 'date')
            await this.dateDialog(msg);
        else if (this.mode === 'message')
            await this.messageDialog(msg);
        else if (this.mode === 'profile')
            await this.profileDialog(msg);
        else if (this.mode === 'opener')
            await this.openerDialog(msg);
        else{
            const text = msg.text;
            //—á—Ç–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –±–æ—Ç
            await this.sendText('<b>–ü—Ä–∏–≤–µ—Ç</b>')
            await this.sendText('<i>–ö–∞–∫ —Ç—ã?</i>')
            await this.sendText(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}`)

            await this.sendImage('avatar_main')

            await this.sendTextButtons('–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ç–µ–º–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ?', {
                'theme_light':'–°–≤–µ—Ç–ª–∞—è',
                'theme_dark':'–¢–µ–º–Ω–∞—è',
            })
        }

    }

    async helloButton(callbackQuery) {
        //–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–Ω–æ–ø–∫–∏:
        const query = callbackQuery.data;
        if(query === 'theme_light')
            await this.sendText('–£ –≤–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞')
        else if (query === 'theme_dark')
            await this.sendText('–£ –≤–∞—Å —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞')
    }
}

// –æ–±—å–µ–∫—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞:
const chatgpt = new ChatGptService('#')
const bot = new MyTelegramBot("#");
// –ú—ã –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Ç—É—Ç –Ω–∞—à –∫–æ–¥
// –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start /html /gpt:
bot.onCommand( /\/start/ , bot.start)
bot.onCommand( /\/html/ , bot.html)
bot.onCommand( /\/gpt/ , bot.gpt)
bot.onCommand( /\/date/ , bot.date)
bot.onCommand( /\/message/ , bot.message)
bot.onCommand( /\/profile/ , bot.profile)
bot.onCommand( /\/opener/ , bot.opener)
//–ø–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é hello —Å MyTelegramBot:
bot.onTextMessage(bot.hello)
// ^ - –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
// . - –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
// * - –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã
bot.onButtonCallback( /^date_.*/ , bot.dateButton)
bot.onButtonCallback( /^message_.*/ , bot.messageButton)
bot.onButtonCallback( /^.*/ , bot.helloButton)